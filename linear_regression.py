# -*- coding: utf-8 -*-
"""linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xI7RGxe2LJYT1bKbWGoeGyFEG6d8yJiY
"""

import sklearn
import matplotlib.pyplot as plt
import numpy as np
import scipy.optimize

# define features dataset

x_arr= np.array([1, 2, 3, 4,5,6,7,8,9,10])

#define target dataset
y_arr  = np.array([0.2000 ,0.5000 ,0.3000 ,0.7000, 1.0000, 1.5000, 1.8000 ,2.0000 ,2.3000, 2.2000])

plt.xticks(x_arr)
plt.plot(x_arr,y_arr)

plt.show()

def fit1(x0,x_arr,y_arr):
    return max(abs( x0[0]*x_arr + x0[1]-y_arr))

def fit2(x0,x_arr,y_arr):
    return sum(abs( x0[0]*x_arr+x0[1]-y_arr ))

def fit3(x0,x_arr, y_arr):
    return sum((abs(x0[0]*x_arr+x0[1]-y_arr))**2 )

x0 = np.array([1,1]) 
p1 = scipy.optimize.minimize(fit1,x0=np.array([1,1]),args=(x_arr,y_arr))
p2 = scipy.optimize.minimize(fit2,x0=np.array([1,1]),args=(x_arr,y_arr))
p3 = scipy.optimize.minimize(fit3,x0=np.array([1,1]),args=(x_arr,y_arr))

print(p1)
print(p2)
print(p3)

xf = np.arange(0, 11.1000, 0.1000, dtype=float)
y1 = np.polyval(p1.x,xf)
y2 = np.polyval(p2.x,xf)
y3 = np.polyval(p3.x,xf)

print(xf)

plt.plot(xf,y1,'k',linewidth = 1, label="E∞" )
plt.plot(xf,y2,'k--', label= "E1")
plt.plot(xf,y3,'b:', label="E2")
plt.plot(x_arr, y_arr, 'ro',linewidth=3 )
plt.yticks(np.arange(min(x_arr), max(x_arr)+1, 1.0))
plt.ylim(0, 4)
plt.xlim(0, 11)
leg = plt.legend()

# define outliners

xo_arr= np.array([1, 2, 3, 4,5,6,7,8,9,10])

#define target dataset
yo_arr  = np.array([0.2000 ,0.5000 ,0.3000 ,3.5000, 1.0000, 1.5000, 1.8000 ,2.0000 ,2.3000, 2.2000])

plt.xticks(xo_arr)
plt.plot(xo_arr,yo_arr)

plt.show()

def fit1(x0,xo_arr,yo_arr):
    return max(abs( x0[0]*xo_arr + x0[1]-yo_arr))

def fit2(x0,xo_arr,yo_arr):
    return sum(abs( x0[0]*xo_arr+x0[1]-yo_arr ))

def fit3(x0,xo_arr, yo_arr):
    return sum((abs(x0[0]*xo_arr+x0[1]-yo_arr))**2 )

x0 = np.array([1,1]) 
p1 = scipy.optimize.minimize(fit1,x0=np.array([1,1]),args=(xo_arr,yo_arr))
p2 = scipy.optimize.minimize(fit2,x0=np.array([1,1]),args=(xo_arr,yo_arr))
p3 = scipy.optimize.minimize(fit3,x0=np.array([1,1]),args=(xo_arr,yo_arr))

xf = np.arange(0, 11.1000, 0.1000, dtype=float)

y1 = np.polyval(p1.x,xf)
y2 = np.polyval(p2.x,xf)
y3 = np.polyval(p3.x,xf)

plt.plot(xf,y1,'k',linewidth = 1, label="E∞" )
plt.plot(xf,y2,'k--', label= "E1")
plt.plot(xf,y3,'b:', label="E2")
plt.plot(xo_arr, yo_arr, 'ro',linewidth=3 )
plt.yticks(np.arange(min(xo_arr), max(xo_arr)+1, 1.0))
plt.ylim(0, 4)
plt.xlim(0, 11)
leg = plt.legend()

plt.show()

fig, ax = plt.subplots(2)

ax[0].plot(xf,y1,'k',linewidth = 1, label="E∞" )
ax[0].plot(xf,y2,'k--', label= "E1")
ax[0].plot(xf,y3,'b:', label="E2")
ax[0].plot(x_arr, y_arr, 'ro',linewidth=3 )
plt.yticks(np.arange(min(x_arr), max(x_arr)+1, 1.0))
plt.ylim(0, 4)
plt.xlim(0, 11)
leg = ax[0].legend()


ax[1].plot(xf,y1,'k',linewidth = 1, label="E∞" )
ax[1].plot(xf,y2,'k--', label= "E1")
ax[1].plot(xf,y3,'b:', label="E2")
ax[1].plot(xo_arr, yo_arr, 'ro',linewidth=3 )
plt.yticks(np.arange(min(xo_arr), max(xo_arr)+1, 1.0))
plt.ylim(0, 4)
plt.xlim(0, 11)
leg = ax[1].legend()

plt.show()

# define features dataset

x_poly= np.array([1, 2, 3, 4,5,6,7,8,9,10])

#define target dataset
y_poly  = np.array([0.2000 ,0.5000 ,0.3000 ,0.5000, 1.0000, 1.5000, 1.8000 ,2.0000 ,2.3000, 2.2000])

plt.xticks(x_poly)
plt.plot(x_poly,y_poly)

plt.show()

# polynomial of degree 2

def maxerr(x0,x_poly2,y_poly2):
    return max(abs( x0[0]*((x_poly2)**2) + x0[1]*x_poly2 + x0[2] - y_poly2))

def abserr(x0,x_poly2,y_poly2):
    return sum(abs( x0[0]*((x_poly2)**2) + x0[1]*x_poly2 + x0[2] - y_poly2))

def sqrterr(x0,x_poly2, y_poly2):
    return sum((abs( x0[0]*((x_poly2)**2) + x0[1]*x_poly2 + x0[2] - y_poly2))**2 )


p1_poly2 = scipy.optimize.minimize(maxerr,x0=np.array([1,1,1]),args=(x_poly,y_poly))
p2_poly2 = scipy.optimize.minimize(abserr,x0=np.array([1,1,1]),args=(x_poly,y_poly))
p3_poly2 = scipy.optimize.minimize(sqrterr,x0=np.array([1,1,1]),args=(x_poly,y_poly))

xf_poly2 = np.arange(0, 11.1000, 0.1000, dtype=float)
y1_poly2 = np.polyval(p1_poly2.x,xf_poly2)
y2_poly2 = np.polyval(p2_poly2.x,xf_poly2)
y3_poly2 = np.polyval(p3_poly2.x,xf_poly2)


def maxerr3(x0,x_poly3,y_poly3):
    return max(abs( x0[0]*(x_poly3**3) + x0[1]*((x_poly3)**2) + x0[2]*x_poly3 + x0[3] - y_poly3))

def abserr3(x0,x_poly3,y_poly3):
    return sum(abs( x0[0]*(x_poly3**3) + x0[1]*((x_poly3)**2) + x0[2]*x_poly3 + x0[3] - y_poly3))

def sqrterr3(x0,x_poly3,y_poly3):
    return sum((abs( x0[0]*(x_poly3**3) + x0[1]*((x_poly3)**2) + x0[2]*x_poly3 + x0[3] - y_poly3))**2 )


p1_poly3 = scipy.optimize.minimize(maxerr3,x0=np.array([1,1,5,2]),args=(x_poly,y_poly))
p2_poly3 = scipy.optimize.minimize(abserr3,x0=np.array([-0.05,0.5,-3,5]),args=(x_poly,y_poly))
p3_poly3 = scipy.optimize.minimize(sqrterr3,x0=np.array([-0.01,0.1,-0.5,0.6]),args=(x_poly,y_poly))

xf_poly3 = np.arange(0, 11.1000, 0.1000, dtype=float)

y1_poly3 = np.polyval(p1_poly3.x,xf_poly3)
y2_poly3 = np.polyval(p2_poly3.x,xf_poly3)
y3_poly3 = np.polyval(p3_poly3.x,xf_poly3)


def maxerr4(x0,x_poly4,y_poly4):
    return max(abs( x0[0]*(x_poly4**4) + x0[1]*(x_poly4**3) + x0[2]*((x_poly4)**2) + x0[3]*x_poly4 + x0[4] - y_poly4))

def abserr4(x0,x_poly4,y_poly4):
    return sum(abs( x0[0]*(x_poly4**4) + x0[1]*(x_poly4**3) + x0[2]*((x_poly4)**2) + x0[3]*x_poly4 + x0[4] - y_poly4))

def sqrterr4(x0,x_poly4,y_poly4):
    return sum((abs( x0[0]*(x_poly4**4) + x0[1]*(x_poly4**3) + x0[2]*((x_poly4)**2) + x0[3]*x_poly4 + x0[4] - y_poly4))**2 )


p1_poly4 = scipy.optimize.minimize(maxerr4,x0=np.array([0.1,-0.2,0.2,2,0.3]),args=(x_poly,y_poly))
p2_poly4 = scipy.optimize.minimize(abserr4,x0=np.array([0.01,-0.5,1,-1,-0.5]),args=(x_poly,y_poly))
p3_poly4 = scipy.optimize.minimize(sqrterr4,x0=np.array([0.0001,-0.02,0.2,-0.5,0.1]),args=(x_poly,y_poly))

xf_poly4 = np.arange(0, 11.1000, 0.1000, dtype=float)

y1_poly4 = np.polyval(p1_poly4.x,xf_poly4)
y2_poly4 = np.polyval(p2_poly4.x,xf_poly4)
y3_poly4 = np.polyval(p3_poly4.x,xf_poly4)


def maxerr5(x0,x_poly5,y_poly5):
    return max(abs( x0[0]*(x_poly5**5) + x0[1]*(x_poly5**4) + x0[2]*(x_poly5**3) + x0[3]*((x_poly5)**2) + x0[4]*x_poly5 + x0[5] - y_poly5))

def abserr5(x0,x_poly5,y_poly5):
    return sum(abs( x0[0]*(x_poly5**5) + x0[1]*(x_poly5**4) + x0[2]*(x_poly5**3) + x0[3]*((x_poly5)**2) + x0[4]*x_poly5 + x0[5] - y_poly5))

def sqrterr5(x0,x_poly5,y_poly5):
    return sum((abs( x0[0]*(x_poly5**5) + x0[1]*(x_poly5**4) + x0[2]*(x_poly5**3) + x0[3]*((x_poly5)**2) + x0[4]*x_poly5 + x0[5] - y_poly5))**2 )


p1_poly5 = scipy.optimize.minimize(maxerr5,x0=np.array([0.1 , 1 , 5 , 3.5 ,  2,  -1]),args=(x_poly,y_poly))
p2_poly5 = scipy.optimize.minimize(abserr5,x0=np.array([0.001 , 0.03 , -0.7 , 5 ,  -5,  -1]),args=(x_poly,y_poly))
p3_poly5 = scipy.optimize.minimize(sqrterr5,x0=np.array([0.00001 , 0.001 , 0.05 , -0.5 ,  2,  -1]),args=(x_poly,y_poly))

xf_poly5 = np.arange(0, 11.1000, 0.1000, dtype=float)

y1_poly5 = np.polyval(p1_poly5.x,xf_poly5)
y2_poly5 = np.polyval(p2_poly5.x,xf_poly5)
y3_poly5 = np.polyval(p3_poly5.x,xf_poly5)


def maxerr6(x0,x_poly6,y_poly6):
    return max(abs( x0[0]*(x_poly6**6) + x0[1]*(x_poly6**5) + x0[2]*(x_poly6**4) + x0[3]*(x_poly6**3) + x0[4]*((x_poly6)**2) + x0[5]*x_poly6 + x0[6] - y_poly6))

def abserr6(x0,x_poly6,y_poly6):
    return max(abs( x0[0]*(x_poly6**6) + x0[1]*(x_poly6**5) + x0[2]*(x_poly6**4) + x0[3]*(x_poly6**3) + x0[4]*((x_poly6)**2) + x0[5]*x_poly6 + x0[6] - y_poly6))

def sqrterr6(x0,x_poly6,y_poly6):
    return max(abs( x0[0]*(x_poly6**6) + x0[1]*(x_poly6**5) + x0[2]*(x_poly6**4) + x0[3]*(x_poly6**3) + x0[4]*((x_poly6)**2) + x0[5]*x_poly6 + x0[6] - y_poly6))


p1_poly6 = scipy.optimize.minimize(maxerr6,x0=np.array([-0.0001,0.05,-0.4,0.6,-3,0.7,3]),args=(x_poly,y_poly))
p2_poly6 = scipy.optimize.minimize(abserr6,x0=np.array([-0.00001,0.005,-0.4,1,-3,0.07,6]),args=(x_poly,y_poly))
p3_poly6 = scipy.optimize.minimize(sqrterr6,x0=np.array([-0.00001,0.005,-0.4,1,-3,0.01,5]),args=(x_poly,y_poly))

xf_poly6 = np.arange(0, 11.1000, 0.1000, dtype=float)


y1_poly6 = np.polyval(p1_poly6.x,xf_poly6)
y2_poly6 = np.polyval(p2_poly6.x,xf_poly6)
y3_poly6 = np.polyval(p3_poly6.x,xf_poly6)

print(p1_poly6)

#PLOTTING ALL POLYNOMINALS - NO OUTLIERS

plt.plot(xf_poly2,y1_poly2,'k',linewidth = 1, label="E∞" )
plt.plot(xf_poly2,y2_poly2,'k--', label= "E1")
plt.plot(xf_poly2,y3_poly2,'b:', label="E2")
plt.plot(x_poly, y_poly, 'ro',linewidth=1 )
plt.yticks(np.arange(0, 4, step=1))
plt.xticks(np.arange(0, 11, step=1))
plt.ylim(0, 4)
plt.xlim(0, 11)
plt.title("POLY DEGREE 2")
leg = plt.legend()
plt.show()


plt.plot(xf_poly3,y1_poly3,'k',linewidth = 1, label="E∞" )
plt.plot(xf_poly3,y2_poly3,'k--', label= "E1")
plt.plot(xf_poly3,y3_poly3,'b:', label="E2")
plt.plot(x_poly, y_poly, 'ro',linewidth=1 )
plt.yticks(np.arange(0, 4, step=1))
plt.xticks(np.arange(0, 11, step=1))
plt.ylim(0, 4)
plt.xlim(0, 11)
plt.title("POLY DEGREE 3")
leg = plt.legend()
plt.show()

plt.plot(xf_poly4,y1_poly4,'k',linewidth = 1, label="E∞" )
plt.plot(xf_poly4,y2_poly4,'k--', label= "E1")
plt.plot(xf_poly4,y3_poly4,'b:',label="E2")
plt.plot(x_poly, y_poly, 'ro',linewidth=1 )
plt.yticks(np.arange(0, 4, step=1))
plt.xticks(np.arange(0, 11, step=1))
plt.ylim(0, 4)
plt.xlim(0, 11)
plt.title("POLY DEGREE 4")
leg = plt.legend()
plt.show()


plt.plot(xf_poly5,y1_poly5,'k',linewidth = 1, label="E∞" )
plt.plot(xf_poly5,y2_poly5,'k--', label= "E1")
plt.plot(xf_poly5,y3_poly5,'b:', label="E2")
plt.plot(x_poly, y_poly, 'ro',linewidth=1 )
plt.yticks(np.arange(0, 4, step=1))
plt.xticks(np.arange(0, 11, step=1))
plt.ylim(0, 4)
plt.xlim(0, 11)
plt.title("POLY DEGREE 5")
leg = plt.legend()
plt.show()

plt.plot(xf_poly6,y1_poly6,'k',linewidth = 1, label="E∞" )
plt.plot(xf_poly6,y2_poly6,'k--', label= "E1")
plt.plot(xf_poly6,y3_poly6,'b:', label="E2")
plt.plot(x_poly, y_poly, 'ro',linewidth=1 )
plt.yticks(np.arange(0, 4, step=1))
plt.xticks(np.arange(0, 11, step=1))
plt.ylim(0, 4)
plt.xlim(0, 11)
plt.title("POLY DEGREE 6")
leg = plt.legend()
plt.show()

# define features dataset

xo_poly= np.array([1, 2, 3, 4,5,6,7,8,9,10])

#define target dataset
yo_poly  = np.array([0.2000 ,0.5000 ,0.3000 ,3.5000, 1.0000, 1.5000, 1.8000 ,2.0000 ,2.3000, 2.2000])

plt.xticks(xo_poly)
plt.plot(xo_poly,yo_poly)

plt.show()

# polynomial of degree 2

def maxerr_otl(x0,xo_poly2,yo_poly2):
    return max(abs( x0[0]*((xo_poly2)**2) + x0[1]*xo_poly2 + x0[2] - yo_poly2))

def abserr_otl(x0,xo_poly2,yo_poly2):
    return sum(abs( x0[0]*((xo_poly2)**2) + x0[1]*xo_poly2 + x0[2] - yo_poly2))

def sqrterr_otl(x0,xo_poly2, yo_poly2):
    return sum((abs( x0[0]*((xo_poly2)**2) + x0[1]*xo_poly2 + x0[2] - yo_poly2))**2 )


p1o_poly2 = scipy.optimize.minimize(maxerr,x0=np.array([1,1,1]),args=(xo_poly,yo_poly))
p2o_poly2 = scipy.optimize.minimize(abserr,x0=np.array([1,1,1]),args=(xo_poly,yo_poly))
p3o_poly2 = scipy.optimize.minimize(sqrterr,x0=np.array([1,1,1]),args=(xo_poly,yo_poly))

xfo_poly2 = np.arange(0, 111, 1, dtype=float)

y1o_poly2 = np.polyval(p1o_poly2.x,xfo_poly2)
y2o_poly2 = np.polyval(p2o_poly2.x,xfo_poly2)
y3o_poly2 = np.polyval(p3o_poly2.x,xfo_poly2)



def maxerr3_otl(x0,xo_poly3,yo_poly3):
    return max(abs( x0[0]*(xo_poly3**3) + x0[1]*((xo_poly3)**2) + x0[2]*xo_poly3 + x0[3] - yo_poly3))

def abserr3_otl(x0,xo_poly3,yo_poly3):
    return sum(abs( x0[0]*(xo_poly3**3) + x0[1]*((xo_poly3)**2) + x0[2]*xo_poly3 + x0[3] - yo_poly3))

def sqrterr3_otl(x0,xo_poly3,yo_poly3):
    return sum((abs( x0[0]*(xo_poly3**3) + x0[1]*((xo_poly3)**2) + x0[2]*xo_poly3 + x0[3] - yo_poly3))**2 )


p1o_poly3 = scipy.optimize.minimize(maxerr3,x0=np.array([1,1,5,2]),args=(xo_poly,yo_poly))
p2o_poly3 = scipy.optimize.minimize(abserr3,x0=np.array([-0.05,0.5,-3,5]),args=(xo_poly,yo_poly))
p3o_poly3 = scipy.optimize.minimize(sqrterr3,x0=np.array([-0.01,0.1,-0.5,0.6]),args=(xo_poly,yo_poly))

xfo_poly3 = np.arange(0, 11.1000, 0.1000, dtype=float)

y1o_poly3 = np.polyval(p1o_poly3.x,xfo_poly3)
y2o_poly3 = np.polyval(p2o_poly3.x,xfo_poly3)
y3o_poly3 = np.polyval(p3o_poly3.x,xfo_poly3)


def maxerr4_otl(x0,xo_poly4,yo_poly4):
    return max(abs( x0[0]*(xo_poly4**4) + x0[1]*(xo_poly4**3) + x0[2]*((xo_poly4)**2) + x0[3]*xo_poly4 + x0[4] - yo_poly4))

def abserr4_otl(x0,xo_poly4,yo_poly4):
    return sum(abs( x0[0]*(xo_poly4**4) + x0[1]*(xo_poly4**3) + x0[2]*((xo_poly4)**2) + x0[3]*xo_poly4 + x0[4] - yo_poly4))

def sqrterr4_otl(x0,xo_poly4,yo_poly4):
    return sum((abs( x0[0]*(xo_poly4**4) + x0[1]*(xo_poly4**3) + x0[2]*((xo_poly4)**2) + x0[3]*xo_poly4 + x0[4] - yo_poly4))**2 )


p1o_poly4 = scipy.optimize.minimize(maxerr4,x0=np.array([0.1,-0.2,0.2,2,0.3]),args=(xo_poly,yo_poly))
p2o_poly4 = scipy.optimize.minimize(abserr4,x0=np.array([0.01,-0.5,1,-1,-0.5]),args=(xo_poly,yo_poly))
p3o_poly4 = scipy.optimize.minimize(sqrterr4,x0=np.array([0.0001,-0.02,0.2,-0.5,0.1]),args=(xo_poly,yo_poly))

xfo_poly4 = np.arange(0, 11.1000, 0.1000, dtype=float)

y1o_poly4 = np.polyval(p1o_poly4.x,xfo_poly4)
y2o_poly4 = np.polyval(p2o_poly4.x,xfo_poly4)
y3o_poly4 = np.polyval(p3o_poly4.x,xfo_poly4)



def maxerr5_otl(x0,xo_poly5,yo_poly5):
    return max(abs( x0[0]*(xo_poly5**5) + x0[1]*(xo_poly5**4) + x0[2]*(xo_poly5**3) + x0[3]*((xo_poly5)**2) + x0[4]*xo_poly5 + x0[5] - yo_poly5))

def abserr5_otl(x0,xo_poly5,yo_poly5):
    return sum(abs( x0[0]*(xo_poly5**5) + x0[1]*(xo_poly5**4) + x0[2]*(xo_poly5**3) + x0[3]*((xo_poly5)**2) + x0[4]*xo_poly5 + x0[5] - yo_poly5))

def sqrterr5_otl(x0,xo_poly5,yo_poly5):
    return sum((abs( x0[0]*(xo_poly5**5) + x0[1]*(xo_poly5**4) + x0[2]*(xo_poly5**3) + x0[3]*((xo_poly5)**2) + x0[4]*xo_poly5 + x0[5] - yo_poly5))**2 )


p1o_poly5 = scipy.optimize.minimize(maxerr5,x0=np.array([0.1 , 1 , 5 , 3.5 ,  2,  -1]),args=(xo_poly,yo_poly))
p2o_poly5 = scipy.optimize.minimize(abserr5,x0=np.array([0.001 , 0.03 , -0.7 , 5 ,  -5,  -1]),args=(xo_poly,yo_poly))
p3o_poly5 = scipy.optimize.minimize(sqrterr5,x0=np.array([0.00001 , 0.001 , 0.05 , -0.5 ,  2,  -1]),args=(xo_poly,yo_poly))

xfo_poly5 = np.arange(0, 11.1000, 0.1000, dtype=float)

y1o_poly5 = np.polyval(p1o_poly5.x,xfo_poly5)
y2o_poly5 = np.polyval(p2o_poly5.x,xfo_poly5)
y3o_poly5 = np.polyval(p3o_poly5.x,xfo_poly5)


def maxerr6_otl(x0,xo_poly6,yo_poly6):
    return max(abs( x0[0]*(xo_poly6**6) + x0[1]*(xo_poly6**5) + x0[2]*(xo_poly6**4) + x0[3]*(xo_poly6**3) + x0[4]*((xo_poly6)**2) + x0[5]*xo_poly6 + x0[6] - yo_poly6))

def abserr6_otl(x0,xo_poly6,yo_poly6):
    return max(abs( x0[0]*(xo_poly6**6) + x0[1]*(xo_poly6**5) + x0[2]*(xo_poly6**4) + x0[3]*(xo_poly6**3) + x0[4]*((xo_poly6)**2) + x0[5]*xo_poly6 + x0[6] - yo_poly6))

def sqrterr6_otl(x0,xo_poly6,yo_poly6):
    return max(abs( x0[0]*(xo_poly6**6) + x0[1]*(xo_poly6**5) + x0[2]*(xo_poly6**4) + x0[3]*(xo_poly6**3) + x0[4]*((xo_poly6)**2) + x0[5]*xo_poly6 + x0[6] - yo_poly6))


p1o_poly6 = scipy.optimize.minimize(maxerr6,x0=np.array([-0.0001,0.05,-0.4,0.6,-3,0.7,3]),args=(xo_poly,yo_poly))
p2o_poly6 = scipy.optimize.minimize(abserr6,x0=np.array([-0.00001,0.005,-0.4,1,-3,0.07,6]),args=(xo_poly,yo_poly))
p3o_poly6 = scipy.optimize.minimize(sqrterr6,x0=np.array([-0.00001,0.005,-0.4,1,-3,0.01,5]),args=(xo_poly,yo_poly))

xfo_poly6 = np.arange(0, 11.1000, 0.1000, dtype=float)



y1o_poly6 = np.polyval(p1o_poly6.x,xfo_poly6)
y2o_poly6 = np.polyval(p2o_poly6.x,xfo_poly6)
y3o_poly6 = np.polyval(p3o_poly6.x,xfo_poly6)

fig, axs = plt.subplots(5, 2,figsize=(15,25))

#PLOTTING ALL POLYNOMINALS - NO OUTLIERS

axs[0, 0].plot(xf_poly2,y1_poly2,'k',linewidth = 1, label="E∞" )
axs[0, 0].plot(xf_poly2,y2_poly2,'k--', label= "E1")
axs[0, 0].plot(xf_poly2,y3_poly2,'b:', label="E2")
axs[0, 0].plot(x_poly, y_poly, 'ro',linewidth=1 )
axs[0, 0].set_yticks(np.arange(0, 4, step=1))
axs[0, 0].set_xticks(np.arange(0, 11, step=1))
axs[0, 0].set_ylim(0, 4)
axs[0, 0].set_xlim(0, 11)
axs[0, 0].set_title("POLY DEGREE 2")
axs[0, 0].legend()


axs[1, 0].plot(xf_poly3,y1_poly3,'k',linewidth = 1, label="E∞" )
axs[1, 0].plot(xf_poly3,y2_poly3,'k--', label= "E1")
axs[1, 0].plot(xf_poly3,y3_poly3,'b:', label="E2")
axs[1, 0].plot(x_poly, y_poly, 'ro',linewidth=1 )
axs[1, 0].set_yticks(np.arange(0, 4, step=1))
axs[1, 0].set_xticks(np.arange(0, 11, step=1))
axs[1, 0].set_ylim(0, 4)
axs[1, 0].set_xlim(0, 11)
axs[1, 0].set_title("POLY DEGREE 3 - OPTIMAL FIT")
axs[1, 0].legend()


axs[2, 0].plot(xf_poly4,y1_poly4,'k',linewidth = 1, label="E∞" )
axs[2, 0].plot(xf_poly4,y2_poly4,'k--', label= "E1")
axs[2, 0].plot(xf_poly4,y3_poly4,'b:', label="E2")
axs[2, 0].plot(x_poly, y_poly, 'ro',linewidth=1 )
axs[2, 0].set_yticks(np.arange(0, 4, step=1))
axs[2, 0].set_xticks(np.arange(0, 11, step=1))
axs[2, 0].set_ylim(0, 4)
axs[2, 0].set_xlim(0, 11)
axs[2, 0].set_title("POLY DEGREE 4 - OPTIMAL FIT")
axs[2, 0].legend()


axs[3, 0].plot(xf_poly5,y1_poly5,'k',linewidth = 1, label="E∞" )
axs[3, 0].plot(xf_poly5,y2_poly5,'k--', label= "E1")
axs[3, 0].plot(xf_poly5,y3_poly5,'b:', label="E2")
axs[3, 0].plot(x_poly, y_poly, 'ro',linewidth=1 )
axs[3, 0].set_yticks(np.arange(0, 4, step=1))
axs[3, 0].set_xticks(np.arange(0, 11, step=1))
axs[3, 0].set_ylim(0, 4)
axs[3, 0].set_xlim(0, 11)
axs[3, 0].set_title("POLY DEGREE 5 - OVERFIT FOR SQRTed ERROR")
axs[3, 0].legend()

axs[4, 0].plot(xf_poly6,y1_poly6,'k',linewidth = 1, label="E∞" )
axs[4, 0].plot(xf_poly6,y2_poly6,'k--', label= "E1")
axs[4, 0].plot(xf_poly6,y3_poly6,'b:', label="E2")
axs[4, 0].plot(x_poly, y_poly, 'ro',linewidth=1 )
axs[4, 0].set_yticks(np.arange(0, 4, step=1))
axs[4, 0].set_xticks(np.arange(0, 11, step=1))
axs[4, 0].set_ylim(0, 4)
axs[4, 0].set_xlim(0, 11)
axs[4, 0].set_title("POLY DEGREE 6 - UNDERFIT")
axs[4, 0].legend()

# PLOTTING ALL polynommials WITH OUTLIERS

axs[0, 1].plot(xfo_poly2,y1o_poly2,'k',linewidth = 1, label="E∞" )
axs[0, 1].plot(xfo_poly2,y2o_poly2,'k--', label= "E1")
axs[0, 1].plot(xfo_poly2,y3o_poly2,'b:', label="E2")
axs[0, 1].plot(xo_poly, yo_poly, 'ro',linewidth=1 )
axs[0, 1].set_yticks(np.arange(0, 4, step=1))
axs[0, 1].set_xticks(np.arange(0, 11, step=1))
axs[0, 1].set_ylim(0, 4)
axs[0, 1].set_xlim(0, 11)
axs[0, 1].set_title("POLY DEGREE 2")
axs[0, 1].legend()


axs[1,1].plot(xfo_poly3,y1o_poly3,'k',linewidth = 1, label="E∞" )
axs[1,1].plot(xfo_poly3,y2o_poly3,'k--', label= "E1")
axs[1,1].plot(xfo_poly3,y3o_poly3,'b:', label="E2")
axs[1,1].plot(xo_poly, yo_poly, 'ro',linewidth=1 )
axs[1,1].set_yticks(np.arange(0, 4, step=1))
axs[1,1].set_xticks(np.arange(0, 11, step=1))
axs[1,1].set_ylim(0, 4)
axs[1,1].set_xlim(0, 11)
axs[1,1].set_title("POLY DEGREE 3 WITH OUTLIER - SLIGHT FIT")
axs[1,1].legend()


axs[2,1].plot(xfo_poly4,y1o_poly4,'k',linewidth = 1, label="E∞" )
axs[2,1].plot(xfo_poly4,y2o_poly4,'k--', label= "E1")
axs[2,1].plot(xfo_poly4,y3o_poly4,'b:', label="E2")
axs[2,1].plot(xo_poly, yo_poly, 'ro',linewidth=1 )
axs[2,1].set_yticks(np.arange(0, 4, step=1))
axs[2,1].set_xticks(np.arange(0, 11, step=1))
axs[2,1].set_ylim(0, 4)
axs[2,1].set_xlim(0, 11)
axs[2,1].set_title("POLY DEGREE 4 WITH OUTLIER - OPTIMAL FIT FOR ABS ERR")
axs[2,1].legend()


axs[3,1].plot(xfo_poly5,y1o_poly5,'k',linewidth = 1, label="E∞" )
axs[3,1].plot(xfo_poly5,y2o_poly5,'k--', label= "E1")
axs[3,1].plot(xfo_poly5,y3o_poly5,'b:',label="E2")
axs[3,1].plot(xo_poly, yo_poly, 'ro',linewidth=1 )
axs[3,1].set_yticks(np.arange(0, 4, step=1))
axs[3,1].set_xticks(np.arange(0, 11, step=1))
axs[3,1].set_ylim(0, 4)
axs[3,1].set_xlim(0, 11)
axs[3,1].set_title("POLY DEGREE 5 WITH OUTLIER - UNDERFIT")
axs[3,1].legend()


axs[4,1].plot(xfo_poly6,y1o_poly6,'k',linewidth = 1, label="E∞" )
axs[4,1].plot(xfo_poly6,y2o_poly6,'k--', label= "E1")
axs[4,1].plot(xfo_poly6,y3o_poly6,'b:', label="E2")
axs[4,1].plot(xo_poly, yo_poly, 'ro',linewidth=1 )
axs[4,1].set_yticks(np.arange(0, 4, step=1))
axs[4,1].set_xticks(np.arange(0, 11, step=1))
axs[4,1].set_ylim(0, 4)
axs[4,1].set_xlim(0, 11)
axs[4,1].set_title("POLY DEGREE 6 WITH OUTLIER - UNDERFIT")
axs[4,1].legend()
plt.show()

"""**CONCLUSION:**

BEST POLYNOMIAL FIT - NO OUTLIERS
"""

plt.plot(xf_poly3,y1_poly3,'k',linewidth = 1, label="E∞" )
plt.plot(xf_poly3,y2_poly3,'k--', label= "E1")
plt.plot(xf_poly3,y3_poly3,'b:', label="E2")
plt.plot(x_poly, y_poly, 'ro',linewidth=1 )
plt.yticks(np.arange(0, 4, step=1))
plt.xticks(np.arange(0, 11, step=2))
plt.ylim(0, 4)
plt.xlim(0, 11)
plt.title("POLY DEGREE 3 - NO OUTLIERS")
leg = plt.legend()
plt.show()

"""BEST POLYNOMIAL FIT WITH OUTLIERS 

There is NO PERFECT FIT. 
Closed fits are DEGREE 2 and DEGREE 3
"""

plt.plot(xfo_poly2,y1o_poly2,'k',linewidth = 1, label="E∞" )
plt.plot(xfo_poly2,y2o_poly2,'k--', label= "E1")
plt.plot(xfo_poly2,y3o_poly2,'b:', label="E2")
plt.plot(xo_poly, yo_poly, 'ro',linewidth=1 )
plt.yticks(np.arange(0, 4, step=1))
plt.xticks(np.arange(0, 11, step=2))
plt.ylim(0, 4)
plt.xlim(0, 11)
plt.title("POLY DEGREE 2")
leg = plt.legend()
plt.show()

plt.plot(xfo_poly3,y1o_poly3,'k',linewidth = 1, label="E∞" )
plt.plot(xfo_poly3,y2o_poly3,'k--', label= "E1")
plt.plot(xfo_poly3,y3o_poly3,'b:', label="E2")
plt.plot(xo_poly, yo_poly, 'ro',linewidth=1 )
plt.yticks(np.arange(0, 4, step=1))
plt.xticks(np.arange(0, 11, step=2))
plt.ylim(0, 4)
plt.xlim(0, 11)
plt.title("POLY DEGREE 3")
leg = plt.legend()
plt.show()